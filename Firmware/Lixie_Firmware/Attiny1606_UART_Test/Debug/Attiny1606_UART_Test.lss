
Attiny1606_UART_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803c00  00803c00  000001ad  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000f  0000812a  0000012a  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  000001ad  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001955  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000156d  00000000  00000000  00001bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c5  00000000  00000000  0000311a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000034e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bf5  00000000  00000000  00003548  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a3  00000000  00000000  0000413d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000041e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62
  88:	0e 94 83 00 	call	0x106	; 0x106 <main>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <USART1_init>:
void USART1_sendChar(char c);
void USART1_sendString(char *str);

void USART1_init(void)
{
   PORTA.DIR &= ~PIN2_bm;
  94:	e0 e0       	ldi	r30, 0x00	; 0
  96:	f4 e0       	ldi	r31, 0x04	; 4
  98:	80 81       	ld	r24, Z
  9a:	8b 7f       	andi	r24, 0xFB	; 251
  9c:	80 83       	st	Z, r24
   PORTB.DIR |= PIN3_bm;
  9e:	e0 e2       	ldi	r30, 0x20	; 32
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	80 81       	ld	r24, Z
  a4:	88 60       	ori	r24, 0x08	; 8
  a6:	80 83       	st	Z, r24
   
   USART0.BAUD = (uint16_t)USART1_BAUD_RATE(9600UL);
  a8:	e0 e0       	ldi	r30, 0x00	; 0
  aa:	f8 e0       	ldi	r31, 0x08	; 8
  ac:	8d e8       	ldi	r24, 0x8D	; 141
  ae:	90 e2       	ldi	r25, 0x20	; 32
  b0:	80 87       	std	Z+8, r24	; 0x08
  b2:	91 87       	std	Z+9, r25	; 0x09
   USART0.CTRLB |= USART_TXEN_bm;
  b4:	86 81       	ldd	r24, Z+6	; 0x06
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	86 83       	std	Z+6, r24	; 0x06
  ba:	08 95       	ret

000000bc <USART1_sendChar>:
}

void USART1_sendChar(char c)
{
   while (!(USART0.STATUS & USART_DREIF_bm))
  bc:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
  c0:	95 ff       	sbrs	r25, 5
  c2:	fc cf       	rjmp	.-8      	; 0xbc <USART1_sendChar>
   {
      ;
   }
   USART0.TXDATAL = c;
  c4:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
  c8:	08 95       	ret

000000ca <USART1_sendString>:
}

void USART1_sendString(char *str)
{
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	8c 01       	movw	r16, r24
   for(size_t i = 0; i < strlen(str); i++)
  d4:	c0 e0       	ldi	r28, 0x00	; 0
  d6:	d0 e0       	ldi	r29, 0x00	; 0
  d8:	07 c0       	rjmp	.+14     	; 0xe8 <USART1_sendString+0x1e>
   {
      USART1_sendChar(str[i]);
  da:	f8 01       	movw	r30, r16
  dc:	ec 0f       	add	r30, r28
  de:	fd 1f       	adc	r31, r29
  e0:	80 81       	ld	r24, Z
  e2:	0e 94 5e 00 	call	0xbc	; 0xbc <USART1_sendChar>
   USART0.TXDATAL = c;
}

void USART1_sendString(char *str)
{
   for(size_t i = 0; i < strlen(str); i++)
  e6:	21 96       	adiw	r28, 0x01	; 1
  e8:	f8 01       	movw	r30, r16
  ea:	01 90       	ld	r0, Z+
  ec:	00 20       	and	r0, r0
  ee:	e9 f7       	brne	.-6      	; 0xea <USART1_sendString+0x20>
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	e0 1b       	sub	r30, r16
  f4:	f1 0b       	sbc	r31, r17
  f6:	ce 17       	cp	r28, r30
  f8:	df 07       	cpc	r29, r31
  fa:	78 f3       	brcs	.-34     	; 0xda <USART1_sendString+0x10>
   {
      USART1_sendChar(str[i]);
   }
}
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	1f 91       	pop	r17
 102:	0f 91       	pop	r16
 104:	08 95       	ret

00000106 <main>:

int main(void)
{
   USART1_init();
 106:	0e 94 4a 00 	call	0x94	; 0x94 <USART1_init>
   while (1)
   {
      USART1_sendString("Hello World!\r\n");
 10a:	8a e2       	ldi	r24, 0x2A	; 42
 10c:	91 e8       	ldi	r25, 0x81	; 129
 10e:	0e 94 65 00 	call	0xca	; 0xca <USART1_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	2f e7       	ldi	r18, 0x7F	; 127
 114:	84 e8       	ldi	r24, 0x84	; 132
 116:	9e e1       	ldi	r25, 0x1E	; 30
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x12>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x1c>
 122:	00 00       	nop
 124:	f2 cf       	rjmp	.-28     	; 0x10a <main+0x4>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
