
01_Lixie_Clock_ATmega16_141222.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000352  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000352  000003c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e34  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008dd  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000064b  00000000  00000000  00001c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000214  00000000  00000000  00002280  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000556  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004b7  00000000  00000000  000029ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00002ea1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  8a:	0c 94 a7 01 	jmp	0x34e	; 0x34e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <clock_transmit>:
   
   led_eof();
}

void clock_transmit(Clock_time_t data)
{
  92:	bf 92       	push	r11
  94:	cf 92       	push	r12
  96:	df 92       	push	r13
  98:	ef 92       	push	r14
  9a:	ff 92       	push	r15
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	00 d0       	rcall	.+0      	; 0xa6 <clock_transmit+0x14>
  a6:	00 d0       	rcall	.+0      	; 0xa8 <clock_transmit+0x16>
  a8:	1f 92       	push	r1
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	5a 83       	std	Y+2, r21	; 0x02
  b0:	6b 83       	std	Y+3, r22	; 0x03
  b2:	7c 83       	std	Y+4, r23	; 0x04
  b4:	8d 83       	std	Y+5, r24	; 0x05
   
   unsigned char upper_time= data.time/10;
  b6:	04 2f       	mov	r16, r20
  b8:	8d ec       	ldi	r24, 0xCD	; 205
  ba:	48 9f       	mul	r20, r24
  bc:	f1 2c       	mov	r15, r1
  be:	11 24       	eor	r1, r1
  c0:	f6 94       	lsr	r15
  c2:	f6 94       	lsr	r15
  c4:	f6 94       	lsr	r15
   unsigned char lower_time = data.time%10;
  c6:	9f 2d       	mov	r25, r15
  c8:	99 0f       	add	r25, r25
  ca:	89 2f       	mov	r24, r25
  cc:	88 0f       	add	r24, r24
  ce:	88 0f       	add	r24, r24
  d0:	89 0f       	add	r24, r25
  d2:	08 1b       	sub	r16, r24
   
   for(signed char i=9; i >= 0; i--)
  d4:	19 e0       	ldi	r17, 0x09	; 9
  d6:	27 c0       	rjmp	.+78     	; 0x126 <clock_transmit+0x94>
   {
      if(i == upper_time)
  d8:	2f 2d       	mov	r18, r15
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	81 2f       	mov	r24, r17
  de:	01 2e       	mov	r0, r17
  e0:	00 0c       	add	r0, r0
  e2:	99 0b       	sbc	r25, r25
  e4:	82 17       	cp	r24, r18
  e6:	93 07       	cpc	r25, r19
  e8:	89 f4       	brne	.+34     	; 0x10c <clock_transmit+0x7a>
      {
         led_time(data.intensity, data.R, data.G, data.B);
  ea:	bd 80       	ldd	r11, Y+5	; 0x05
  ec:	cc 80       	ldd	r12, Y+4	; 0x04
  ee:	db 80       	ldd	r13, Y+3	; 0x03
  f0:	ea 80       	ldd	r14, Y+2	; 0x02
  f2:	2b 2d       	mov	r18, r11
  f4:	4c 2d       	mov	r20, r12
  f6:	6d 2d       	mov	r22, r13
  f8:	8e 2d       	mov	r24, r14
  fa:	0e 94 32 01 	call	0x264	; 0x264 <led_time>
         led_time(data.intensity, data.R, data.G, data.B);
  fe:	2b 2d       	mov	r18, r11
 100:	4c 2d       	mov	r20, r12
 102:	6d 2d       	mov	r22, r13
 104:	8e 2d       	mov	r24, r14
 106:	0e 94 32 01 	call	0x264	; 0x264 <led_time>
 10a:	0c c0       	rjmp	.+24     	; 0x124 <clock_transmit+0x92>
      }
      else
      {
         led_time(0x00, 0, 0, 0);
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 32 01 	call	0x264	; 0x264 <led_time>
         led_time(0x00, 0, 0, 0);
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 32 01 	call	0x264	; 0x264 <led_time>
{
   
   unsigned char upper_time= data.time/10;
   unsigned char lower_time = data.time%10;
   
   for(signed char i=9; i >= 0; i--)
 124:	11 50       	subi	r17, 0x01	; 1
 126:	11 23       	and	r17, r17
 128:	bc f6       	brge	.-82     	; 0xd8 <clock_transmit+0x46>
 12a:	19 e0       	ldi	r17, 0x09	; 9
 12c:	27 c0       	rjmp	.+78     	; 0x17c <clock_transmit+0xea>
      }
   }
   
   for(signed char i=9; i >= 0; i--)
   {
      if(i == lower_time)
 12e:	20 2f       	mov	r18, r16
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	81 2f       	mov	r24, r17
 134:	01 2e       	mov	r0, r17
 136:	00 0c       	add	r0, r0
 138:	99 0b       	sbc	r25, r25
 13a:	82 17       	cp	r24, r18
 13c:	93 07       	cpc	r25, r19
 13e:	89 f4       	brne	.+34     	; 0x162 <clock_transmit+0xd0>
      {
         led_time(data.intensity, data.R, data.G, data.B);
 140:	cd 80       	ldd	r12, Y+5	; 0x05
 142:	dc 80       	ldd	r13, Y+4	; 0x04
 144:	eb 80       	ldd	r14, Y+3	; 0x03
 146:	fa 80       	ldd	r15, Y+2	; 0x02
 148:	2c 2d       	mov	r18, r12
 14a:	4d 2d       	mov	r20, r13
 14c:	6e 2d       	mov	r22, r14
 14e:	8f 2d       	mov	r24, r15
 150:	0e 94 32 01 	call	0x264	; 0x264 <led_time>
         led_time(data.intensity, data.R, data.G, data.B);
 154:	2c 2d       	mov	r18, r12
 156:	4d 2d       	mov	r20, r13
 158:	6e 2d       	mov	r22, r14
 15a:	8f 2d       	mov	r24, r15
 15c:	0e 94 32 01 	call	0x264	; 0x264 <led_time>
 160:	0c c0       	rjmp	.+24     	; 0x17a <clock_transmit+0xe8>
      }
      else
      {
         led_time(0x00, 0, 0, 0);
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 32 01 	call	0x264	; 0x264 <led_time>
         led_time(0x00, 0, 0, 0);
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 32 01 	call	0x264	; 0x264 <led_time>
         led_time(0x00, 0, 0, 0);
         led_time(0x00, 0, 0, 0);
      }
   }
   
   for(signed char i=9; i >= 0; i--)
 17a:	11 50       	subi	r17, 0x01	; 1
 17c:	11 23       	and	r17, r17
 17e:	bc f6       	brge	.-82     	; 0x12e <clock_transmit+0x9c>
      {
         led_time(0x00, 0, 0, 0);
         led_time(0x00, 0, 0, 0);
      }
   }
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	0f 90       	pop	r0
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	ff 90       	pop	r15
 194:	ef 90       	pop	r14
 196:	df 90       	pop	r13
 198:	cf 90       	pop	r12
 19a:	bf 90       	pop	r11
 19c:	08 95       	ret

0000019e <clock_data>:

#include "clock.h"

void clock_data(Clock_time_t hours, Clock_time_t minutes, Clock_time_t seconds)
{
 19e:	8f 92       	push	r8
 1a0:	9f 92       	push	r9
 1a2:	af 92       	push	r10
 1a4:	bf 92       	push	r11
 1a6:	cf 92       	push	r12
 1a8:	ef 92       	push	r14
 1aa:	ff 92       	push	r15
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	2f 97       	sbiw	r28, 0x0f	; 15
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	49 83       	std	Y+1, r20	; 0x01
 1c6:	5a 83       	std	Y+2, r21	; 0x02
 1c8:	6b 83       	std	Y+3, r22	; 0x03
 1ca:	7c 83       	std	Y+4, r23	; 0x04
 1cc:	8d 83       	std	Y+5, r24	; 0x05
 1ce:	ee 82       	std	Y+6, r14	; 0x06
 1d0:	ff 82       	std	Y+7, r15	; 0x07
 1d2:	08 87       	std	Y+8, r16	; 0x08
 1d4:	19 87       	std	Y+9, r17	; 0x09
 1d6:	2a 87       	std	Y+10, r18	; 0x0a
 1d8:	8b 86       	std	Y+11, r8	; 0x0b
 1da:	9c 86       	std	Y+12, r9	; 0x0c
 1dc:	ad 86       	std	Y+13, r10	; 0x0d
 1de:	be 86       	std	Y+14, r11	; 0x0e
 1e0:	cf 86       	std	Y+15, r12	; 0x0f
   led_sof();
 1e2:	0e 94 1c 01 	call	0x238	; 0x238 <led_sof>
   
   // Sekunden
   clock_transmit(seconds);
 1e6:	4b 85       	ldd	r20, Y+11	; 0x0b
 1e8:	5c 85       	ldd	r21, Y+12	; 0x0c
 1ea:	6d 85       	ldd	r22, Y+13	; 0x0d
 1ec:	7e 85       	ldd	r23, Y+14	; 0x0e
 1ee:	8f 85       	ldd	r24, Y+15	; 0x0f
 1f0:	0e 94 49 00 	call	0x92	; 0x92 <clock_transmit>
   
   // Minuten
   clock_transmit(minutes);
 1f4:	4e 81       	ldd	r20, Y+6	; 0x06
 1f6:	5f 81       	ldd	r21, Y+7	; 0x07
 1f8:	68 85       	ldd	r22, Y+8	; 0x08
 1fa:	79 85       	ldd	r23, Y+9	; 0x09
 1fc:	8a 85       	ldd	r24, Y+10	; 0x0a
 1fe:	0e 94 49 00 	call	0x92	; 0x92 <clock_transmit>
   
   // Stunden
   clock_transmit(hours);
 202:	49 81       	ldd	r20, Y+1	; 0x01
 204:	5a 81       	ldd	r21, Y+2	; 0x02
 206:	6b 81       	ldd	r22, Y+3	; 0x03
 208:	7c 81       	ldd	r23, Y+4	; 0x04
 20a:	8d 81       	ldd	r24, Y+5	; 0x05
 20c:	0e 94 49 00 	call	0x92	; 0x92 <clock_transmit>
   
   led_eof();
 210:	0e 94 27 01 	call	0x24e	; 0x24e <led_eof>
}
 214:	2f 96       	adiw	r28, 0x0f	; 15
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	f8 94       	cli
 21a:	de bf       	out	0x3e, r29	; 62
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	cd bf       	out	0x3d, r28	; 61
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	ff 90       	pop	r15
 22a:	ef 90       	pop	r14
 22c:	cf 90       	pop	r12
 22e:	bf 90       	pop	r11
 230:	af 90       	pop	r10
 232:	9f 90       	pop	r9
 234:	8f 90       	pop	r8
 236:	08 95       	ret

00000238 <led_sof>:
{
   spi_init(SPI_Master, SPI_MSB, SPI_Falling, SPI_Rising);
}

void led_sof()
{
 238:	cf 93       	push	r28
   for(unsigned char i=0; i < LED_FRAME; i++)
 23a:	c0 e0       	ldi	r28, 0x00	; 0
 23c:	04 c0       	rjmp	.+8      	; 0x246 <led_sof+0xe>
   {
      spi_transfer(LED_SOF);
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 a0 01 	call	0x340	; 0x340 <spi_transfer>
   spi_init(SPI_Master, SPI_MSB, SPI_Falling, SPI_Rising);
}

void led_sof()
{
   for(unsigned char i=0; i < LED_FRAME; i++)
 244:	cf 5f       	subi	r28, 0xFF	; 255
 246:	c4 30       	cpi	r28, 0x04	; 4
 248:	d0 f3       	brcs	.-12     	; 0x23e <led_sof+0x6>
   {
      spi_transfer(LED_SOF);
   }
}
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <led_eof>:

void led_eof()
{
 24e:	cf 93       	push	r28
   for(unsigned char i=0; i < LED_FRAME; i++)
 250:	c0 e0       	ldi	r28, 0x00	; 0
 252:	04 c0       	rjmp	.+8      	; 0x25c <led_eof+0xe>
   {
      spi_transfer(LED_EOF);
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	0e 94 a0 01 	call	0x340	; 0x340 <spi_transfer>
   }
}

void led_eof()
{
   for(unsigned char i=0; i < LED_FRAME; i++)
 25a:	cf 5f       	subi	r28, 0xFF	; 255
 25c:	c4 30       	cpi	r28, 0x04	; 4
 25e:	d0 f3       	brcs	.-12     	; 0x254 <led_eof+0x6>
   {
      spi_transfer(LED_EOF);
   }
}
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <led_time>:

void led_time(unsigned char intensity, unsigned char r, unsigned char g, unsigned char b)
{
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	c6 2f       	mov	r28, r22
 26c:	d4 2f       	mov	r29, r20
 26e:	12 2f       	mov	r17, r18
   spi_transfer(0xE0 | intensity);
 270:	80 6e       	ori	r24, 0xE0	; 224
 272:	0e 94 a0 01 	call	0x340	; 0x340 <spi_transfer>
   spi_transfer(b);
 276:	81 2f       	mov	r24, r17
 278:	0e 94 a0 01 	call	0x340	; 0x340 <spi_transfer>
   spi_transfer(g);
 27c:	8d 2f       	mov	r24, r29
 27e:	0e 94 a0 01 	call	0x340	; 0x340 <spi_transfer>
   spi_transfer(r);
 282:	8c 2f       	mov	r24, r28
 284:	0e 94 a0 01 	call	0x340	; 0x340 <spi_transfer>
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	08 95       	ret

00000290 <__vector_6>:
   TIMSK = (1<<OCIE1A);                 // Mode:      CTC
   OCR1A = 46875;                       // Prescaler: 256
}

void port_init()
{
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	8f 93       	push	r24
 29c:	ef 93       	push	r30
 29e:	ff 93       	push	r31
 2a0:	e0 e6       	ldi	r30, 0x60	; 96
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	8f 5f       	subi	r24, 0xFF	; 255
 2a8:	80 83       	st	Z, r24
 2aa:	80 81       	ld	r24, Z
 2ac:	8c 33       	cpi	r24, 0x3C	; 60
 2ae:	98 f0       	brcs	.+38     	; 0x2d6 <__vector_6+0x46>
 2b0:	e5 e6       	ldi	r30, 0x65	; 101
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	8f 5f       	subi	r24, 0xFF	; 255
 2b8:	80 83       	st	Z, r24
 2ba:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 2be:	80 81       	ld	r24, Z
 2c0:	8c 33       	cpi	r24, 0x3C	; 60
 2c2:	48 f0       	brcs	.+18     	; 0x2d6 <__vector_6+0x46>
 2c4:	ea e6       	ldi	r30, 0x6A	; 106
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	8f 5f       	subi	r24, 0xFF	; 255
 2cc:	80 83       	st	Z, r24
 2ce:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <minutes>
 2d2:	80 81       	ld	r24, Z
 2d4:	10 82       	st	Z, r1
 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	8f 91       	pop	r24
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <timer_init>:
 2e6:	8c e0       	ldi	r24, 0x0C	; 12
 2e8:	8e bd       	out	0x2e, r24	; 46
 2ea:	80 e1       	ldi	r24, 0x10	; 16
 2ec:	89 bf       	out	0x39, r24	; 57
 2ee:	8b e1       	ldi	r24, 0x1B	; 27
 2f0:	97 eb       	ldi	r25, 0xB7	; 183
 2f2:	9b bd       	out	0x2b, r25	; 43
 2f4:	8a bd       	out	0x2a, r24	; 42
 2f6:	08 95       	ret

000002f8 <main>:

int main(void)
{
   
   
   timer_init();           // Timer initialisieren
 2f8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <timer_init>
   port_init();            // Ports initialisieren
   sei();                  // Interrupt starten
 2fc:	78 94       	sei
   
   
   while (1)
   {
      clock_data(hours, minutes, seconds);
 2fe:	80 90 60 00 	lds	r8, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 302:	90 90 61 00 	lds	r9, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 306:	a0 90 62 00 	lds	r10, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 30a:	b0 90 63 00 	lds	r11, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 30e:	c0 90 64 00 	lds	r12, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 312:	e0 90 65 00 	lds	r14, 0x0065	; 0x800065 <minutes>
 316:	f0 90 66 00 	lds	r15, 0x0066	; 0x800066 <minutes+0x1>
 31a:	00 91 67 00 	lds	r16, 0x0067	; 0x800067 <minutes+0x2>
 31e:	10 91 68 00 	lds	r17, 0x0068	; 0x800068 <minutes+0x3>
 322:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <minutes+0x4>
 326:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <hours>
 32a:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <hours+0x1>
 32e:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <hours+0x2>
 332:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <hours+0x3>
 336:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <hours+0x4>
 33a:	0e 94 cf 00 	call	0x19e	; 0x19e <clock_data>
 33e:	df cf       	rjmp	.-66     	; 0x2fe <main+0x6>

00000340 <spi_transfer>:
    //  |                                                               |
    //  |    Return:    0x??    ->  Receive time byte                   |
    //  +---------------------------------------------------------------+
    unsigned char spi_transfer(unsigned char time)
    {
        SPDR = time;    // Write time into the SPI time Register and initiate a transmission
 340:	8f b9       	out	0x0f, r24	; 15
    
        // Wait until transmission is Complete
        while(!(SPSR & (1<<SPIF)))
 342:	01 c0       	rjmp	.+2      	; 0x346 <spi_transfer+0x6>
            asm volatile("NOP");
 344:	00 00       	nop
    unsigned char spi_transfer(unsigned char time)
    {
        SPDR = time;    // Write time into the SPI time Register and initiate a transmission
    
        // Wait until transmission is Complete
        while(!(SPSR & (1<<SPIF)))
 346:	77 9b       	sbis	0x0e, 7	; 14
 348:	fd cf       	rjmp	.-6      	; 0x344 <spi_transfer+0x4>
                if(SPSR & (1<<WCOL))
                    SPI_WCOL_PORT |= (1<<SPI_WCOL_PIN);
            #endif
        #endif
        
        return SPDR;    // Return received time from the bus
 34a:	8f b1       	in	r24, 0x0f	; 15
    }
 34c:	08 95       	ret

0000034e <_exit>:
 34e:	f8 94       	cli

00000350 <__stop_program>:
 350:	ff cf       	rjmp	.-2      	; 0x350 <__stop_program>
