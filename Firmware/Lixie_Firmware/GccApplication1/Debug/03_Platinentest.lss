
03_Platinentest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000002ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bad  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f7  00000000  00000000  00000f79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000563  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00001cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e2  00000000  00000000  00001e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000330  00000000  00000000  0000230a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000263a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_6>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 95 00 	call	0x12a	; 0x12a <main>
  74:	0c 94 1b 01 	jmp	0x236	; 0x236 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <led_init>:
#include "led.h"

void led_init()
{
   spi_init(SPI_Master, SPI_MSB, SPI_Falling, SPI_Rising);
  7c:	20 e0       	ldi	r18, 0x00	; 0
  7e:	41 e0       	ldi	r20, 0x01	; 1
  80:	60 e0       	ldi	r22, 0x00	; 0
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	0e 94 c8 00 	call	0x190	; 0x190 <spi_init>
  88:	08 95       	ret

0000008a <led_sof>:
}

void led_sof()
{
  8a:	cf 93       	push	r28
   for(unsigned char i=0; i < LED_FRAME; i++)
  8c:	c0 e0       	ldi	r28, 0x00	; 0
  8e:	04 c0       	rjmp	.+8      	; 0x98 <led_sof+0xe>
   {
      spi_transfer(LED_SOF);
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	0e 94 14 01 	call	0x228	; 0x228 <spi_transfer>
   spi_init(SPI_Master, SPI_MSB, SPI_Falling, SPI_Rising);
}

void led_sof()
{
   for(unsigned char i=0; i < LED_FRAME; i++)
  96:	cf 5f       	subi	r28, 0xFF	; 255
  98:	c4 30       	cpi	r28, 0x04	; 4
  9a:	d0 f3       	brcs	.-12     	; 0x90 <led_sof+0x6>
   {
      spi_transfer(LED_SOF);
   }
}
  9c:	cf 91       	pop	r28
  9e:	08 95       	ret

000000a0 <led_eof>:

void led_eof()
{
  a0:	cf 93       	push	r28
   for(unsigned char i=0; i < LED_FRAME; i++)
  a2:	c0 e0       	ldi	r28, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <led_eof+0xe>
   {
      spi_transfer(LED_EOF);
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	0e 94 14 01 	call	0x228	; 0x228 <spi_transfer>
   }
}

void led_eof()
{
   for(unsigned char i=0; i < LED_FRAME; i++)
  ac:	cf 5f       	subi	r28, 0xFF	; 255
  ae:	c4 30       	cpi	r28, 0x04	; 4
  b0:	d0 f3       	brcs	.-12     	; 0xa6 <led_eof+0x6>
   {
      spi_transfer(LED_EOF);
   }
}
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <led_time>:

void led_time(unsigned char intensity, unsigned char r, unsigned char g, unsigned char b)
{
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	c6 2f       	mov	r28, r22
  be:	d4 2f       	mov	r29, r20
  c0:	12 2f       	mov	r17, r18
   spi_transfer(0xE0 | intensity);
  c2:	80 6e       	ori	r24, 0xE0	; 224
  c4:	0e 94 14 01 	call	0x228	; 0x228 <spi_transfer>
   spi_transfer(b);
  c8:	81 2f       	mov	r24, r17
  ca:	0e 94 14 01 	call	0x228	; 0x228 <spi_transfer>
   spi_transfer(g);
  ce:	8d 2f       	mov	r24, r29
  d0:	0e 94 14 01 	call	0x228	; 0x228 <spi_transfer>
   spi_transfer(r);
  d4:	8c 2f       	mov	r24, r28
  d6:	0e 94 14 01 	call	0x228	; 0x228 <spi_transfer>
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	1f 91       	pop	r17
  e0:	08 95       	ret

000000e2 <__vector_6>:


volatile unsigned char clk = 0;

ISR(TIMER1_COMPA_vect)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
   PORTC ^= 0x01;
  f0:	95 b3       	in	r25, 0x15	; 21
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	89 27       	eor	r24, r25
  f6:	85 bb       	out	0x15, r24	; 21
   
   if((++clk) > 9)
  f8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  fc:	8f 5f       	subi	r24, 0xFF	; 255
  fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 102:	8a 30       	cpi	r24, 0x0A	; 10
 104:	10 f0       	brcs	.+4      	; 0x10a <__vector_6+0x28>
   {
      clk = 0;
 106:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
   }
}
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <timer_init>:

void timer_init()
{
   TCCR1B =  (1<<WGM12) | (1<<CS12);    // Timer setup
 118:	8c e0       	ldi	r24, 0x0C	; 12
 11a:	8e bd       	out	0x2e, r24	; 46
   TIMSK = (1<<OCIE1A);                 // Mode:      CTC
 11c:	80 e1       	ldi	r24, 0x10	; 16
 11e:	89 bf       	out	0x39, r24	; 57
   OCR1A = 46875;                       // Prescaler: 256
 120:	8b e1       	ldi	r24, 0x1B	; 27
 122:	97 eb       	ldi	r25, 0xB7	; 183
 124:	9b bd       	out	0x2b, r25	; 43
 126:	8a bd       	out	0x2a, r24	; 42
 128:	08 95       	ret

0000012a <main>:
}

int main(void)
{
   DDRC = 0x01;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	84 bb       	out	0x14, r24	; 20
   
   led_init();
 12e:	0e 94 3e 00 	call	0x7c	; 0x7c <led_init>
   timer_init();
 132:	0e 94 8c 00 	call	0x118	; 0x118 <timer_init>
   
   sei();
 136:	78 94       	sei
   
   while (1)
   {
      led_sof();
 138:	0e 94 45 00 	call	0x8a	; 0x8a <led_sof>
      
      
      for (unsigned char j=0; j < 6; j++)
 13c:	d0 e0       	ldi	r29, 0x00	; 0
 13e:	23 c0       	rjmp	.+70     	; 0x186 <main+0x5c>
      {
         for (unsigned char i=0; i < 10; i++)
         {
            if(clk == i)
 140:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 144:	c8 13       	cpse	r28, r24
 146:	0d c0       	rjmp	.+26     	; 0x162 <main+0x38>
            {
               led_time(0x01,255,0,0);
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	6f ef       	ldi	r22, 0xFF	; 255
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 5b 00 	call	0xb6	; 0xb6 <led_time>
               led_time(0x01,255,0,0);
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	6f ef       	ldi	r22, 0xFF	; 255
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 5b 00 	call	0xb6	; 0xb6 <led_time>
 160:	0c c0       	rjmp	.+24     	; 0x17a <main+0x50>
            }
            else
            {
               led_time(0,0,0,0);
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 5b 00 	call	0xb6	; 0xb6 <led_time>
               led_time(0,0,0,0);
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 5b 00 	call	0xb6	; 0xb6 <led_time>
      led_sof();
      
      
      for (unsigned char j=0; j < 6; j++)
      {
         for (unsigned char i=0; i < 10; i++)
 17a:	cf 5f       	subi	r28, 0xFF	; 255
 17c:	01 c0       	rjmp	.+2      	; 0x180 <main+0x56>
 17e:	c0 e0       	ldi	r28, 0x00	; 0
 180:	ca 30       	cpi	r28, 0x0A	; 10
 182:	f0 f2       	brcs	.-68     	; 0x140 <main+0x16>
   while (1)
   {
      led_sof();
      
      
      for (unsigned char j=0; j < 6; j++)
 184:	df 5f       	subi	r29, 0xFF	; 255
 186:	d6 30       	cpi	r29, 0x06	; 6
 188:	d0 f3       	brcs	.-12     	; 0x17e <main+0x54>
            }
            
         }
      }
      
      led_eof();
 18a:	0e 94 50 00 	call	0xa0	; 0xa0 <led_eof>
      
   }
 18e:	d4 cf       	rjmp	.-88     	; 0x138 <main+0xe>

00000190 <spi_init>:
{
    if(!(SPI_PIN & (1<<SPI_SS)))
        return SPI_Enable;
    else
        return SPI_Disable;
}
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	97 b3       	in	r25, 0x17	; 23
 19a:	9f 7a       	andi	r25, 0xAF	; 175
 19c:	97 bb       	out	0x17, r25	; 23
 19e:	98 b3       	in	r25, 0x18	; 24
 1a0:	90 65       	ori	r25, 0x50	; 80
 1a2:	98 bb       	out	0x18, r25	; 24
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	9e b9       	out	0x0e, r25	; 14
 1a8:	9d b9       	out	0x0d, r25	; 13
 1aa:	9d b1       	in	r25, 0x0d	; 13
 1ac:	81 70       	andi	r24, 0x01	; 1
 1ae:	c8 2f       	mov	r28, r24
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	d8 2f       	mov	r29, r24
 1b4:	c2 95       	swap	r28
 1b6:	d2 95       	swap	r29
 1b8:	d0 7f       	andi	r29, 0xF0	; 240
 1ba:	dc 27       	eor	r29, r28
 1bc:	c0 7f       	andi	r28, 0xF0	; 240
 1be:	dc 27       	eor	r29, r28
 1c0:	c9 2b       	or	r28, r25
 1c2:	cd b9       	out	0x0d, r28	; 13
 1c4:	8d b1       	in	r24, 0x0d	; 13
 1c6:	a6 2f       	mov	r26, r22
 1c8:	a1 70       	andi	r26, 0x01	; 1
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
 1cc:	aa 0f       	add	r26, r26
 1ce:	bb 1f       	adc	r27, r27
 1d0:	a2 95       	swap	r26
 1d2:	b2 95       	swap	r27
 1d4:	b0 7f       	andi	r27, 0xF0	; 240
 1d6:	ba 27       	eor	r27, r26
 1d8:	a0 7f       	andi	r26, 0xF0	; 240
 1da:	ba 27       	eor	r27, r26
 1dc:	a8 2b       	or	r26, r24
 1de:	ad b9       	out	0x0d, r26	; 13
 1e0:	8d b1       	in	r24, 0x0d	; 13
 1e2:	04 2f       	mov	r16, r20
 1e4:	01 70       	andi	r16, 0x01	; 1
 1e6:	10 e0       	ldi	r17, 0x00	; 0
 1e8:	00 0f       	add	r16, r16
 1ea:	11 1f       	adc	r17, r17
 1ec:	00 0f       	add	r16, r16
 1ee:	11 1f       	adc	r17, r17
 1f0:	00 0f       	add	r16, r16
 1f2:	11 1f       	adc	r17, r17
 1f4:	e2 2f       	mov	r30, r18
 1f6:	e1 70       	andi	r30, 0x01	; 1
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	ee 0f       	add	r30, r30
 1fc:	ff 1f       	adc	r31, r31
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	e0 2b       	or	r30, r16
 204:	e8 2b       	or	r30, r24
 206:	ed b9       	out	0x0d, r30	; 13
 208:	8d b1       	in	r24, 0x0d	; 13
 20a:	80 64       	ori	r24, 0x40	; 64
 20c:	8d b9       	out	0x0d, r24	; 13
 20e:	87 b3       	in	r24, 0x17	; 23
 210:	80 6f       	ori	r24, 0xF0	; 240
 212:	87 bb       	out	0x17, r24	; 23
 214:	6c 99       	sbic	0x0d, 4	; 13
 216:	02 c0       	rjmp	.+4      	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	01 c0       	rjmp	.+2      	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	08 95       	ret

00000228 <spi_transfer>:
    //  |                                                               |
    //  |    Return:    0x??    ->  Receive time byte                   |
    //  +---------------------------------------------------------------+
    unsigned char spi_transfer(unsigned char time)
    {
        SPDR = time;    // Write time into the SPI time Register and initiate a transmission
 228:	8f b9       	out	0x0f, r24	; 15
    
        // Wait until transmission is Complete
        while(!(SPSR & (1<<SPIF)))
 22a:	01 c0       	rjmp	.+2      	; 0x22e <spi_transfer+0x6>
            asm volatile("NOP");
 22c:	00 00       	nop
    unsigned char spi_transfer(unsigned char time)
    {
        SPDR = time;    // Write time into the SPI time Register and initiate a transmission
    
        // Wait until transmission is Complete
        while(!(SPSR & (1<<SPIF)))
 22e:	77 9b       	sbis	0x0e, 7	; 14
 230:	fd cf       	rjmp	.-6      	; 0x22c <spi_transfer+0x4>
                if(SPSR & (1<<WCOL))
                    SPI_WCOL_PORT |= (1<<SPI_WCOL_PIN);
            #endif
        #endif
        
        return SPDR;    // Return received time from the bus
 232:	8f b1       	in	r24, 0x0f	; 15
    }
 234:	08 95       	ret

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
