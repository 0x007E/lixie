
03_Platinentest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000246  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000002ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c3b  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087f  00000000  00000000  00001013  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005bc  00000000  00000000  00001892  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00001e50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053b  00000000  00000000  00001fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000347  00000000  00000000  000024df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002826  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_6>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 92 00 	call	0x124	; 0x124 <main>
  74:	0c 94 21 01 	jmp	0x242	; 0x242 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <led_init>:
#include "led.h"

void led_init()
{
   spi_init(SPI_Master, SPI_MSB, SPI_Falling, SPI_Rising);
  7c:	20 e0       	ldi	r18, 0x00	; 0
  7e:	41 e0       	ldi	r20, 0x01	; 1
  80:	60 e0       	ldi	r22, 0x00	; 0
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	0e 94 cd 00 	call	0x19a	; 0x19a <spi_init>
  88:	08 95       	ret

0000008a <led_sof>:
}

void led_sof()
{
  8a:	cf 93       	push	r28
   for(unsigned char i=0; i < LED_FRAME; i++)
  8c:	c0 e0       	ldi	r28, 0x00	; 0
  8e:	04 c0       	rjmp	.+8      	; 0x98 <led_sof+0xe>
   {
      spi_transfer(LED_SOF);
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	0e 94 1a 01 	call	0x234	; 0x234 <spi_transfer>
   spi_init(SPI_Master, SPI_MSB, SPI_Falling, SPI_Rising);
}

void led_sof()
{
   for(unsigned char i=0; i < LED_FRAME; i++)
  96:	cf 5f       	subi	r28, 0xFF	; 255
  98:	c4 30       	cpi	r28, 0x04	; 4
  9a:	d0 f3       	brcs	.-12     	; 0x90 <led_sof+0x6>
   {
      spi_transfer(LED_SOF);
   }
}
  9c:	cf 91       	pop	r28
  9e:	08 95       	ret

000000a0 <led_eof>:

void led_eof()
{
  a0:	cf 93       	push	r28
   for(unsigned char i=0; i < LED_FRAME; i++)
  a2:	c0 e0       	ldi	r28, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <led_eof+0xe>
   {
      spi_transfer(LED_EOF);
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	0e 94 1a 01 	call	0x234	; 0x234 <spi_transfer>
   }
}

void led_eof()
{
   for(unsigned char i=0; i < LED_FRAME; i++)
  ac:	cf 5f       	subi	r28, 0xFF	; 255
  ae:	c4 30       	cpi	r28, 0x04	; 4
  b0:	d0 f3       	brcs	.-12     	; 0xa6 <led_eof+0x6>
   {
      spi_transfer(LED_EOF);
   }
}
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <led_time>:

void led_time(unsigned char intensity, unsigned char r, unsigned char g, unsigned char b)
{
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	c6 2f       	mov	r28, r22
  be:	d4 2f       	mov	r29, r20
  c0:	12 2f       	mov	r17, r18
   spi_transfer(0xE0 | intensity);
  c2:	80 6e       	ori	r24, 0xE0	; 224
  c4:	0e 94 1a 01 	call	0x234	; 0x234 <spi_transfer>
   spi_transfer(b);
  c8:	81 2f       	mov	r24, r17
  ca:	0e 94 1a 01 	call	0x234	; 0x234 <spi_transfer>
   spi_transfer(g);
  ce:	8d 2f       	mov	r24, r29
  d0:	0e 94 1a 01 	call	0x234	; 0x234 <spi_transfer>
   spi_transfer(r);
  d4:	8c 2f       	mov	r24, r28
  d6:	0e 94 1a 01 	call	0x234	; 0x234 <spi_transfer>
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	1f 91       	pop	r17
  e0:	08 95       	ret

000000e2 <__vector_6>:


volatile unsigned char clk = 0;

ISR(TIMER1_COMPA_vect)
{  
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
   if(clk++ > 9)
  f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	98 0f       	add	r25, r24
  f8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <_edata>
  fc:	8a 30       	cpi	r24, 0x0A	; 10
  fe:	10 f0       	brcs	.+4      	; 0x104 <__vector_6+0x22>
   {
      clk = 0;
 100:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
   }
}
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <timer_init>:

void timer_init()
{
   TCCR1B =  (1<<WGM12) | (1<<CS12);    // Timer setup
 112:	8c e0       	ldi	r24, 0x0C	; 12
 114:	8e bd       	out	0x2e, r24	; 46
   TIMSK = (1<<OCIE1A);                 // Mode:      CTC
 116:	80 e1       	ldi	r24, 0x10	; 16
 118:	89 bf       	out	0x39, r24	; 57
   OCR1A = 46875;                       // Prescaler: 256
 11a:	8b e1       	ldi	r24, 0x1B	; 27
 11c:	97 eb       	ldi	r25, 0xB7	; 183
 11e:	9b bd       	out	0x2b, r25	; 43
 120:	8a bd       	out	0x2a, r24	; 42
 122:	08 95       	ret

00000124 <main>:
}

int main(void)
{
    led_init();
 124:	0e 94 3e 00 	call	0x7c	; 0x7c <led_init>
    timer_init();
 128:	0e 94 89 00 	call	0x112	; 0x112 <timer_init>
    
    unsigned char last_clk = 0;
    unsigned char last = 0;
    
    sei();
 12c:	78 94       	sei
{
    led_init();
    timer_init();
    
    unsigned char last_clk = 0;
    unsigned char last = 0;
 12e:	d0 e0       	ldi	r29, 0x00	; 0
    
    sei();
    
    while (1) 
    {     
      led_sof();
 130:	0e 94 45 00 	call	0x8a	; 0x8a <led_sof>
      
      for (unsigned char i=0; i < 10; i++)
 134:	c0 e0       	ldi	r28, 0x00	; 0
 136:	1c c0       	rjmp	.+56     	; 0x170 <main+0x4c>
      {
         if(last == i)
 138:	dc 13       	cpse	r29, r28
 13a:	0d c0       	rjmp	.+26     	; 0x156 <main+0x32>
         {
            led_time(0x0F,255,0,0);
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	6f ef       	ldi	r22, 0xFF	; 255
 142:	8f e0       	ldi	r24, 0x0F	; 15
 144:	0e 94 5b 00 	call	0xb6	; 0xb6 <led_time>
            led_time(0x0F,255,0,0);
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	6f ef       	ldi	r22, 0xFF	; 255
 14e:	8f e0       	ldi	r24, 0x0F	; 15
 150:	0e 94 5b 00 	call	0xb6	; 0xb6 <led_time>
 154:	0c c0       	rjmp	.+24     	; 0x16e <main+0x4a>
         }
         else
         {
            led_time(0,0,0,0);
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	40 e0       	ldi	r20, 0x00	; 0
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 5b 00 	call	0xb6	; 0xb6 <led_time>
            led_time(0,0,0,0);
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 5b 00 	call	0xb6	; 0xb6 <led_time>
    
    while (1) 
    {     
      led_sof();
      
      for (unsigned char i=0; i < 10; i++)
 16e:	cf 5f       	subi	r28, 0xFF	; 255
 170:	ca 30       	cpi	r28, 0x0A	; 10
 172:	10 f3       	brcs	.-60     	; 0x138 <main+0x14>
            led_time(0,0,0,0);
         }
         
      }
      
      if((last++) == 9)
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	8d 0f       	add	r24, r29
 178:	d9 30       	cpi	r29, 0x09	; 9
 17a:	11 f0       	breq	.+4      	; 0x180 <main+0x5c>
 17c:	d8 2f       	mov	r29, r24
 17e:	01 c0       	rjmp	.+2      	; 0x182 <main+0x5e>
      {
         last = 0;
 180:	d0 e0       	ldi	r29, 0x00	; 0
      }
      
      
      led_eof();
 182:	0e 94 50 00 	call	0xa0	; 0xa0 <led_eof>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	8e e9       	ldi	r24, 0x9E	; 158
 18a:	94 e2       	ldi	r25, 0x24	; 36
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0x68>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x72>
 196:	00 00       	nop
 198:	cb cf       	rjmp	.-106    	; 0x130 <main+0xc>

0000019a <spi_init>:
{
    if(!(SPI_PIN & (1<<SPI_SS)))
        return SPI_Enable;
    else
        return SPI_Disable;
}
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	97 b3       	in	r25, 0x17	; 23
 1a4:	9f 7a       	andi	r25, 0xAF	; 175
 1a6:	97 bb       	out	0x17, r25	; 23
 1a8:	98 b3       	in	r25, 0x18	; 24
 1aa:	90 65       	ori	r25, 0x50	; 80
 1ac:	98 bb       	out	0x18, r25	; 24
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	9e b9       	out	0x0e, r25	; 14
 1b2:	93 e0       	ldi	r25, 0x03	; 3
 1b4:	9d b9       	out	0x0d, r25	; 13
 1b6:	9d b1       	in	r25, 0x0d	; 13
 1b8:	81 70       	andi	r24, 0x01	; 1
 1ba:	c8 2f       	mov	r28, r24
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	d8 2f       	mov	r29, r24
 1c0:	c2 95       	swap	r28
 1c2:	d2 95       	swap	r29
 1c4:	d0 7f       	andi	r29, 0xF0	; 240
 1c6:	dc 27       	eor	r29, r28
 1c8:	c0 7f       	andi	r28, 0xF0	; 240
 1ca:	dc 27       	eor	r29, r28
 1cc:	c9 2b       	or	r28, r25
 1ce:	cd b9       	out	0x0d, r28	; 13
 1d0:	8d b1       	in	r24, 0x0d	; 13
 1d2:	a6 2f       	mov	r26, r22
 1d4:	a1 70       	andi	r26, 0x01	; 1
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	aa 0f       	add	r26, r26
 1da:	bb 1f       	adc	r27, r27
 1dc:	a2 95       	swap	r26
 1de:	b2 95       	swap	r27
 1e0:	b0 7f       	andi	r27, 0xF0	; 240
 1e2:	ba 27       	eor	r27, r26
 1e4:	a0 7f       	andi	r26, 0xF0	; 240
 1e6:	ba 27       	eor	r27, r26
 1e8:	a8 2b       	or	r26, r24
 1ea:	ad b9       	out	0x0d, r26	; 13
 1ec:	8d b1       	in	r24, 0x0d	; 13
 1ee:	04 2f       	mov	r16, r20
 1f0:	01 70       	andi	r16, 0x01	; 1
 1f2:	10 e0       	ldi	r17, 0x00	; 0
 1f4:	00 0f       	add	r16, r16
 1f6:	11 1f       	adc	r17, r17
 1f8:	00 0f       	add	r16, r16
 1fa:	11 1f       	adc	r17, r17
 1fc:	00 0f       	add	r16, r16
 1fe:	11 1f       	adc	r17, r17
 200:	e2 2f       	mov	r30, r18
 202:	e1 70       	andi	r30, 0x01	; 1
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	ee 0f       	add	r30, r30
 208:	ff 1f       	adc	r31, r31
 20a:	ee 0f       	add	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	e0 2b       	or	r30, r16
 210:	e8 2b       	or	r30, r24
 212:	ed b9       	out	0x0d, r30	; 13
 214:	8d b1       	in	r24, 0x0d	; 13
 216:	80 64       	ori	r24, 0x40	; 64
 218:	8d b9       	out	0x0d, r24	; 13
 21a:	87 b3       	in	r24, 0x17	; 23
 21c:	80 6f       	ori	r24, 0xF0	; 240
 21e:	87 bb       	out	0x17, r24	; 23
 220:	6c 99       	sbic	0x0d, 4	; 13
 222:	02 c0       	rjmp	.+4      	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	01 c0       	rjmp	.+2      	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	1f 91       	pop	r17
 230:	0f 91       	pop	r16
 232:	08 95       	ret

00000234 <spi_transfer>:
    //  |                                                               |
    //  |    Return:    0x??    ->  Receive time byte                   |
    //  +---------------------------------------------------------------+
    unsigned char spi_transfer(unsigned char time)
    {
        SPDR = time;    // Write time into the SPI time Register and initiate a transmission
 234:	8f b9       	out	0x0f, r24	; 15
    
        // Wait until transmission is Complete
        while(!(SPSR & (1<<SPIF)))
 236:	01 c0       	rjmp	.+2      	; 0x23a <spi_transfer+0x6>
            asm volatile("NOP");
 238:	00 00       	nop
    unsigned char spi_transfer(unsigned char time)
    {
        SPDR = time;    // Write time into the SPI time Register and initiate a transmission
    
        // Wait until transmission is Complete
        while(!(SPSR & (1<<SPIF)))
 23a:	77 9b       	sbis	0x0e, 7	; 14
 23c:	fd cf       	rjmp	.-6      	; 0x238 <spi_transfer+0x4>
                if(SPSR & (1<<WCOL))
                    SPI_WCOL_PORT |= (1<<SPI_WCOL_PIN);
            #endif
        #endif
        
        return SPDR;    // Return received time from the bus
 23e:	8f b1       	in	r24, 0x0f	; 15
    }
 240:	08 95       	ret

00000242 <_exit>:
 242:	f8 94       	cli

00000244 <__stop_program>:
 244:	ff cf       	rjmp	.-2      	; 0x244 <__stop_program>
