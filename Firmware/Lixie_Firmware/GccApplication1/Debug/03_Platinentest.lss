
03_Platinentest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803c00  00803c00  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00803c00  00803c00  0000028e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240a  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016ed  00000000  00000000  000027aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005af  00000000  00000000  00003e97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00004448  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010a0  00000000  00000000  00004564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ec  00000000  00000000  00005604  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000057f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_8>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_clear_bss>:
  88:	2c e3       	ldi	r18, 0x3C	; 60
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	bc e3       	ldi	r27, 0x3C	; 60
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  9c:	0c 94 0b 01 	jmp	0x216	; 0x216 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <led_init>:
#include "led.h"

void led_init()
{
   spi_init();
  a4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <spi_init>
  a8:	08 95       	ret

000000aa <led_sof>:
}

void led_sof()
{
  aa:	cf 93       	push	r28
   for(unsigned char i=0; i < LED_FRAME; i++)
  ac:	c0 e0       	ldi	r28, 0x00	; 0
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <led_sof+0xe>
   {
      spi_transfer(LED_SOF);
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <spi_transfer>
   spi_init();
}

void led_sof()
{
   for(unsigned char i=0; i < LED_FRAME; i++)
  b6:	cf 5f       	subi	r28, 0xFF	; 255
  b8:	c4 30       	cpi	r28, 0x04	; 4
  ba:	d0 f3       	brcs	.-12     	; 0xb0 <led_sof+0x6>
   {
      spi_transfer(LED_SOF);
   }
}
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <led_eof>:

void led_eof()
{
  c0:	cf 93       	push	r28
   for(unsigned char i=0; i < LED_FRAME; i++)
  c2:	c0 e0       	ldi	r28, 0x00	; 0
  c4:	04 c0       	rjmp	.+8      	; 0xce <led_eof+0xe>
   {
      spi_transfer(LED_EOF);
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <spi_transfer>
   }
}

void led_eof()
{
   for(unsigned char i=0; i < LED_FRAME; i++)
  cc:	cf 5f       	subi	r28, 0xFF	; 255
  ce:	c4 30       	cpi	r28, 0x04	; 4
  d0:	d0 f3       	brcs	.-12     	; 0xc6 <led_eof+0x6>
   {
      spi_transfer(LED_EOF);
   }
}
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <led_time>:

void led_time(unsigned char intensity, unsigned char r, unsigned char g, unsigned char b)
{
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	c6 2f       	mov	r28, r22
  de:	d4 2f       	mov	r29, r20
  e0:	12 2f       	mov	r17, r18
   spi_transfer(0xE0 | intensity);
  e2:	80 6e       	ori	r24, 0xE0	; 224
  e4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <spi_transfer>
   spi_transfer(b);
  e8:	81 2f       	mov	r24, r17
  ea:	0e 94 ff 00 	call	0x1fe	; 0x1fe <spi_transfer>
   spi_transfer(g);
  ee:	8d 2f       	mov	r24, r29
  f0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <spi_transfer>
   spi_transfer(r);
  f4:	8c 2f       	mov	r24, r28
  f6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <spi_transfer>
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	1f 91       	pop	r17
 100:	08 95       	ret

00000102 <__vector_8>:
   TCA0.SINGLE.CTRLB = TCA_SINGLE_WGMODE_NORMAL_gc;                        // - Normal Mode
   TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV64_gc | TCA_SINGLE_ENABLE_bm;  // - sysclk / 64
}                                                                          // - Startet Timer

void port_init()
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	80 91 01 3c 	lds	r24, 0x3C01	; 0x803c01 <miliseconds>
 112:	8f 5f       	subi	r24, 0xFF	; 255
 114:	80 93 01 3c 	sts	0x3C01, r24	; 0x803c01 <miliseconds>
 118:	8a 30       	cpi	r24, 0x0A	; 10
 11a:	68 f0       	brcs	.+26     	; 0x136 <__vector_8+0x34>
 11c:	80 91 00 3c 	lds	r24, 0x3C00	; 0x803c00 <__DATA_REGION_ORIGIN__>
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 00 3c 	sts	0x3C00, r24	; 0x803c00 <__DATA_REGION_ORIGIN__>
 126:	10 92 01 3c 	sts	0x3C01, r1	; 0x803c01 <miliseconds>
 12a:	80 91 00 3c 	lds	r24, 0x3C00	; 0x803c00 <__DATA_REGION_ORIGIN__>
 12e:	8a 30       	cpi	r24, 0x0A	; 10
 130:	10 f0       	brcs	.+4      	; 0x136 <__vector_8+0x34>
 132:	10 92 00 3c 	sts	0x3C00, r1	; 0x803c00 <__DATA_REGION_ORIGIN__>
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <cpu_init>:
 148:	88 ed       	ldi	r24, 0xD8	; 216
 14a:	84 bf       	out	0x34, r24	; 52
 14c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
 150:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__RODATA_PM_OFFSET__+0x7f8063>
 154:	84 ff       	sbrs	r24, 4
 156:	fc cf       	rjmp	.-8      	; 0x150 <cpu_init+0x8>
 158:	88 ed       	ldi	r24, 0xD8	; 216
 15a:	84 bf       	out	0x34, r24	; 52
 15c:	e0 e6       	ldi	r30, 0x60	; 96
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	11 82       	std	Z+1, r1	; 0x01
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 8b       	std	Z+16, r24	; 0x10
 166:	08 95       	ret

00000168 <timer_init>:
 168:	e0 e0       	ldi	r30, 0x00	; 0
 16a:	fa e0       	ldi	r31, 0x0A	; 10
 16c:	82 e1       	ldi	r24, 0x12	; 18
 16e:	9a e7       	ldi	r25, 0x7A	; 122
 170:	86 a3       	std	Z+38, r24	; 0x26
 172:	97 a3       	std	Z+39, r25	; 0x27
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	82 87       	std	Z+10, r24	; 0x0a
 178:	11 82       	std	Z+1, r1	; 0x01
 17a:	8b e0       	ldi	r24, 0x0B	; 11
 17c:	80 83       	st	Z, r24
 17e:	08 95       	ret

00000180 <main>:
   
}

int main(void)
{
   cpu_init();
 180:	0e 94 a4 00 	call	0x148	; 0x148 <cpu_init>
   port_init();            // Ports initialisieren
   timer_init();
 184:	0e 94 b4 00 	call	0x168	; 0x168 <timer_init>
   led_init();          // Timer initialisieren
 188:	0e 94 52 00 	call	0xa4	; 0xa4 <led_init>
   sei();                  // Interrupt starten
 18c:	78 94       	sei
   
   while (1)
   {
      led_sof();
 18e:	0e 94 55 00 	call	0xaa	; 0xaa <led_sof>
      
      for(unsigned char i=0; i < 10; i++)
 192:	c0 e0       	ldi	r28, 0x00	; 0
 194:	1e c0       	rjmp	.+60     	; 0x1d2 <main+0x52>
      {
         if(seconds == i)
 196:	80 91 00 3c 	lds	r24, 0x3C00	; 0x803c00 <__DATA_REGION_ORIGIN__>
 19a:	c8 13       	cpse	r28, r24
 19c:	0d c0       	rjmp	.+26     	; 0x1b8 <main+0x38>
         {
            led_time(0x01,255, 255, 255);
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	4f ef       	ldi	r20, 0xFF	; 255
 1a2:	6f ef       	ldi	r22, 0xFF	; 255
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 6b 00 	call	0xd6	; 0xd6 <led_time>
            led_time(0x01,255, 255, 255);
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	4f ef       	ldi	r20, 0xFF	; 255
 1ae:	6f ef       	ldi	r22, 0xFF	; 255
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 6b 00 	call	0xd6	; 0xd6 <led_time>
 1b6:	0c c0       	rjmp	.+24     	; 0x1d0 <main+0x50>
         }
         else
         {
            led_time(0,0,0,0);
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 6b 00 	call	0xd6	; 0xd6 <led_time>
            led_time(0,0,0,0);
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 6b 00 	call	0xd6	; 0xd6 <led_time>
   
   while (1)
   {
      led_sof();
      
      for(unsigned char i=0; i < 10; i++)
 1d0:	cf 5f       	subi	r28, 0xFF	; 255
 1d2:	ca 30       	cpi	r28, 0x0A	; 10
 1d4:	00 f3       	brcs	.-64     	; 0x196 <main+0x16>
            led_time(0,0,0,0);
         }
         
      }
      
      led_eof();
 1d6:	0e 94 60 00 	call	0xc0	; 0xc0 <led_eof>
   }
 1da:	d9 cf       	rjmp	.-78     	; 0x18e <main+0xe>

000001dc <spi_init>:

#include "spi.h"

void spi_init()
{   
    PORTMUX.CTRLB |= PORTMUX_SPI0_ALTERNATE_gc;
 1dc:	e0 e0       	ldi	r30, 0x00	; 0
 1de:	f2 e0       	ldi	r31, 0x02	; 2
 1e0:	81 81       	ldd	r24, Z+1	; 0x01
 1e2:	84 60       	ori	r24, 0x04	; 4
 1e4:	81 83       	std	Z+1, r24	; 0x01
    PORTC.DIR |= PIN2_bm;        /* Set MOSI pin direction to output */
 1e6:	e0 e4       	ldi	r30, 0x40	; 64
 1e8:	f4 e0       	ldi	r31, 0x04	; 4
 1ea:	80 81       	ld	r24, Z
 1ec:	84 60       	ori	r24, 0x04	; 4
 1ee:	80 83       	st	Z, r24
    PORTC.DIR |= PIN0_bm;        /* Set SCK pin direction to output */
 1f0:	80 81       	ld	r24, Z
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	80 83       	st	Z, r24
    SPI0.CTRLA = SPI_CLK2X_bm    
 1f6:	85 e3       	ldi	r24, 0x35	; 53
 1f8:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__RODATA_PM_OFFSET__+0x7f8820>
 1fc:	08 95       	ret

000001fe <spi_transfer>:
}


unsigned char spi_transfer(unsigned char data)
{
    SPI0.DATA = data;
 1fe:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
    while (!(SPI0.INTFLAGS & SPI_IF_bm)); /* waits until data is exchanged*/
 202:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <__RODATA_PM_OFFSET__+0x7f8823>
 206:	88 23       	and	r24, r24
 208:	e4 f7       	brge	.-8      	; 0x202 <spi_transfer+0x4>
    
    SPI0.INTFLAGS = SPI_IF_bm;
 20a:	e0 e2       	ldi	r30, 0x20	; 32
 20c:	f8 e0       	ldi	r31, 0x08	; 8
 20e:	80 e8       	ldi	r24, 0x80	; 128
 210:	83 83       	std	Z+3, r24	; 0x03
    
    return SPI0.DATA;
 212:	84 81       	ldd	r24, Z+4	; 0x04
}
 214:	08 95       	ret

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
